def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'jacoco'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

android {
    compileSdkVersion 31

    // sourceSets {
    //     main.java.srcDirs += 'src/main/java'
    //     // main.resources.includes = ['**/jacoco-agent.properties']
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.gesture_automate"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        debug { 
          testCoverageEnabled = true 
       } 
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            testCoverageEnabled true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}


task jacocoRootReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    def coverageSourceDir = ['./src/main/java']
    reports {
        xml.enabled = true
        html.enabled = true
    }


    def fileFilter = ['**/R*.class',
        '**/*$InjectAdapter.class',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class'
    ]

    def javaTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

     getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree([javaTree,kotlinTree])
        }))
    // classDirectories = fileTree(
    //         dir: './build/intermediates/classes/debug',
    //         excludes: ['**/R*.class',
    //                    '**/*$InjectAdapter.class',
    //                    '**/*$ModuleAdapter.class',
    //                    '**/*$ViewInjector*.class'
    //         ])
    getSourceDirectories().setFrom(files(coverageSourceDir))

    // NOTE: Put your ec file here
    getExecutionData().setFrom(files("/Users/ostanpritheshdsouza/Documents/Reports/coverage.ec")
    )

    doFirst {
        new File("$buildDir/intermediates/javac/debug").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
